// Copyright (c) 2014, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library dump_viz.program_info_view;

import 'dart:html';

import 'package:polymer/polymer.dart';

import 'info_helper.dart';

@CustomTag('program-info-view')
class ProgramInfoView extends PolymerElement {
  InfoHelper _model;

  ProgramInfoView.created() : super.created();

  TableElement get _treeTable => $['prog-info'];

  set dumpInfo(InfoHelper dumpInfo) {
    _model = dumpInfo;
    _setupProgramwideInfo();
  }

  void _extractClick(_) {
    String text =
        _model.allOfType('function').map((a) => "${a['name']}").join(', ');
    text = Uri.encodeComponent('[$text]');
    String encoded = 'data:text/plain;charset=utf-8,$text';

    AnchorElement downloadLink = new AnchorElement(href: encoded);
    downloadLink.text = 'download file';
    downloadLink.setAttribute('download', 'functions.txt');
    downloadLink.click();
  }

  void _setupProgramwideInfo() {
    _treeTable.children.clear();
    var map = {
      'Program Size': '${_model.size}  bytes',
      'Compile Time': _model.compilationMoment,
      'Compile Duration': _model.compilationDuration,
      'noSuchMethod Enabled': new SpanElement()
        ..text = _model.noSuchMethodEnabled.toString()
        ..style.background = _model.noSuchMethodEnabled ? "red" : "white",
      // TODO(tyoverby): add support for loading files generated by
      // TRACE_CALLS and compare them to the functions that are produced
      // by dart2js.
      'Extract Function Names': new ButtonElement()
        ..text = 'extract'
        ..onClick.listen(_extractClick)
    };

    map.forEach((k, v) {
      var row = _treeTable.addRow();
      row.addCell()..text = k;
      if (v is String) {
        row.addCell()..text = v;
      } else if (v is Element) {
        row.addCell()..children.add(v);
      } else {
        throw new ArgumentError("Unexpected value in map: $v");
      }
    });
  }
}
